<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Copyright (c) 2013 hangum.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      hangum - initial API and implementation
-->
<!DOCTYPE sqlMap      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
    
<!-- 

	엔지디비에서 사용하는 사용자 관련 쿼리 모음.
	
 -->

<sqlMap namespace="Tadpole-System-User">

<!--
	모든 사용자 리스트 정보. 
 -->
<select id="getUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.lang.Integer">
	SELECT * 
	FROM tadpole_user 
	where seq = #seq#
</select>

<!--
	모든 사용자 리스트 정보.  
 -->
<select id="getAllUserSearch" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.util.HashMap">
	SELECT * 
	FROM tadpole_user 
	where 
			seq not in (-1)
		<isNotEqual property="Approval" compareValue="All">
      			AND approval_yn 			= #Approval#
      	</isNotEqual>		
		
		AND is_email_certification 	= #UserConfirm#
		AND delyn 					= #Del#
	ORDER BY create_time DESC
</select>

<!--
	모든 사용자 리스트 정보. 
 -->
<select id="getAllUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	SELECT * 
	FROM tadpole_user 
	where seq not in (-1)
	ORDER BY create_time DESC
</select>

<!--
	모든 사용자 리스트 정보. 
 -->
<select id="getAllUserCount" resultClass="java.lang.Integer">
	SELECT count(*) cnt 
	FROM tadpole_user 
	where seq not in (-1)
		AND delyn = 'NO'
</select>

<!--
	모든 사용자 리스트 정보. 
 -->
<select id="getLiveAllUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	SELECT * 
	FROM tadpole_user 
	WHERE 
		seq not in (-1)
		and delyn = 'NO'
	AND approval_yn = 'YES'
	AND is_email_certification = 'YES'	
	ORDER BY create_time DESC
</select>

<!--
	user가 있는지 중복 검사 합니다. 
 -->
<select id="isUser" resultClass="java.lang.String" parameterClass="java.lang.String">
	SELECT email 
	FROM tadpole_user 
	WHERE 
		email = #email#
</select>

<!-- 
	find like user
 -->
<select id="findLikeUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.lang.String">
	SELECT *
	FROM tadpole_user 
	WHERE 
		(email like #email# OR name like #email#)
		AND delyn = 'NO'
	ORDER BY create_time DESC
</select>

<!-- 
	find user
 -->
<select id="findEmailUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.lang.String">
	SELECT *
	FROM tadpole_user 
	WHERE 
			email = #email#
		AND delyn = 'NO'
	ORDER BY create_time DESC
</select>

<!-- 
	find user
 -->
<select id="findExternalUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.lang.String">
	SELECT *
	FROM tadpole_user 
	WHERE 
			external_id = #external_id#
		AND delyn = 'NO'
</select>

<!-- 
	신규 유저 등록
 -->
<insert id="newUser" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	INSERT INTO tadpole_user(input_type, email, email_key, is_email_certification, passwd, changed_passwd_time, role_type, name, language, timezone, approval_yn, use_otp, otp_secret, allow_ip
	,is_regist_db, is_shared_db, limit_add_db_cnt, is_modify_perference, is_make_api, service_start, service_end, external_id)
	VALUES(#input_type#, #email#, #email_key#, #is_email_certification#, #passwd#, #changed_passwd_time#, #role_type#, #name#, #language#, #timezone#, #approval_yn#, #use_otp#, #otp_secret#, #allow_ip#
	,#is_regist_db#, #is_shared_db#, #limit_add_db_cnt#, #is_modify_perference#, #is_make_api#, #service_start#, #service_end#, #external_id#)
	
	<selectKey resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
		SELECT * 
		FROM tadpole_user 
		WHERE email = #email# 
			AND delyn = 'NO' 
	</selectKey>
</insert>

<!-- 
탈퇴.
 -->
 <update id="userWithdrawal" parameterClass="java.lang.Integer">
	UPDATE tadpole_user
 	SET   delyn= 'YES' 
 	WHERE 
		seq = #seq# 
</update>
<update id="dbWithdrawal" parameterClass="java.lang.Integer">
	UPDATE tadpole_db
 	SET   delyn= 'YES' 
 	WHERE 
		user_seq = #seq# 
</update>

<!-- 
	로그인
 -->
<select id="login" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	SELECT * 
	FROM tadpole_user 
	WHERE 
			email = #email# 
		AND passwd = #passwd#
		AND delyn = 'NO'
</select>

<!-- 
	user email confirm
 -->
<update id="updateEmailConfirm" parameterClass="java.lang.String">
	UPDATE tadpole_user
	SET is_email_certification = 'YES'
	WHERE 
		email = #email#
</update> 

<!-- 
	save login history
 -->
<insert id="saveLoginHistory" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserLoginHistoryDAO">
	INSERT INTO login_history(user_seq, login_ip, succes_yn, fail_reason) 
	VALUES (#user_seq#, #login_ip#, #succes_yn#, #fail_reason#);
</insert>

<!-- 
	last login history
 -->
<select id="lastLoginCntHistory" resultClass="com.hangum.tadpole.engine.query.dao.system.UserLoginHistoryDAO" parameterClass="java.util.HashMap">
	SELECT seq, user_seq, login_ip, connet_time, disconnect_time, succes_yn, fail_reason 
	FROM login_history
	where user_seq = #intUserSeq#
	order by connet_time desc
	limit #intLastLoginCnt#;
</select>

<!-- 
	When lost password, check security hint
 -->
<select id="checkSecurityHint" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	SELECT * 
	FROM tadpole_user 
	WHERE email = #email#
</select>

<select id="getSystemAdmin" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	SELECT * 
	FROM tadpole_user 
	WHERE 
	 	role_type = 'SYSTEM_ADMIN'
</select>

<!-- userDB의 manager 권한 리스트 -->
<select id="groupManager" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.lang.Integer">
	SELECT a.* 
	FROM tadpole_user a,  user_role b
	WHERE 
			b.role_type = 'MANAGER'
		AND a.seq = b.user_seq;
</select>

<!-- 
	초기 로그인시 유저가 한명이명 인진 조사한다.
	한명이면 로그인화면에 디폴트 유저를 출력해 주기위해서....
 -->
<select id="loginUserCount" resultClass="java.lang.Integer">
	SELECT count(*)
	FROM user
</select>
<select id="onlyOnUser" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	SELECT * 
	FROM tadpole_user 
</select>

<!-- 
	사용자 정보.
 -->
<select id="getUserInfo" resultClass="com.hangum.tadpole.engine.query.dao.system.UserDAO" parameterClass="java.lang.Integer">
	SELECT * 
	FROM tadpole_user 
	WHERE seq = #seq#
</select>

<!-- 사용자 권한을 조절합니다. -->
<update id="updateUserApproval" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET
		approval_yn = #approval_yn#
	WHERE seq = #seq#
</update>

<!-- 
	유저의 권한 데이터를 수정합니다.
 -->
<update id="updateUserPersonToGroup" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET
		email = #email#,
		passwd = #passwd#,
		changed_passwd_time = #changed_passwd_time#,
		name = #name#,
		allow_ip = #allow_ip#
	WHERE seq = #seq#
</update>

<!-- 
	유저의 권한 데이터를 수정합니다.
 -->
<update id="updateUserPermission" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET
		allow_ip 	= #allow_ip#,
		role_type 	= #role_type#,
		delYn 		= #delYn#,
		is_regist_db = #is_regist_db#,
		
		is_shared_db = #is_shared_db#, 
		limit_add_db_cnt = #limit_add_db_cnt#,
		is_modify_perference = #is_modify_perference#,
		is_make_api = #is_make_api#,
		service_end = #service_end#,
		
		approval_yn = #approval_yn#,
		is_email_certification = #is_email_certification#
	WHERE seq = #seq#
</update>

<!-- 
	Change basic info
 -->
<update id="updateUserBasic" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET 
		language = #language#,
		timezone = #timezone#
	WHERE seq = #seq#
</update>

<!-- 
	Change user name and password
	*) just use LDAP User
 -->
<update id="updateUserNameEmail" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET name = #name#,
		email = #email#
	WHERE seq = #seq#
</update>

<!-- 
	Change user password
 -->
<update id="updateUserPassword" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET passwd = #passwd#,
		changed_passwd_time = #changed_passwd_time#
	WHERE seq = #seq#
</update>

<!-- 
	Change user password
 -->
<update id="updateUserPasswordWithID" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user 
	SET passwd = #passwd#,
		changed_passwd_time = #changed_passwd_time#
	WHERE email = #email#
</update>

<!-- 
	Change user otp code
 -->
<update id="updateUserOTPCode" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	UPDATE tadpole_user SET
		use_otp = #use_otp#, 
		otp_secret = #otp_secret#
	WHERE seq = #seq#
</update>

<!-- 
	유저를 삭제합니다.
 
<delete id="deleteUser" parameterClass="com.hangum.tadpole.engine.query.dao.system.UserDAO">
	DELETE 
	FROM tadpole_user 
	WHERE email = #email#
</delete>
-->

</sqlMap>